##########
# IMPORTANT - READ ME

common.r -- MODIFY genome to fit your data, match bis("BSgenome.*") to your genome

##########
# About the output

For each PWM, PIQ outputs 3 files: two .csv files containing call scores and a .pdf containing summary and goodness of fit info.

*-calls.all.csv : contains ALL instances of motif matches from pwmmatch.r and its associated scores. This file is useful if you want to re-do the cutoffs yourself or if you want to look at instances where the motif is matched but the factor is unbound.

*-calls.csv : contains instances of motif match whose scores had purity above the purity.cuotff value in common.r. Purity is a proxy for PPV. A purity of 0.7 means 70% of the entries in calls.csv will be bound (estimated using background binding sites).

*-diag.pdf : contains diagnostic pdf output of the motif and its binding sites.
	
	page 1 : plots purity vs binding site. High maximum purity means there are a small subset of sites which match the predicted DNase-pattern very close, while a large number of moderately high purity sites means there is a gradient of weak purity enrichment. If designing a cutoff this should inform choice of cutoffs.
	page 2 : plots classification boundary of the regressor. + strand is on the left, - strand on the right, above the horizontal line means a read contributes positively to the score. The two values at the bottom give the score when there are no reads (left) and the effect of the number of bases with reads within the window to the score (right).
	page 3 : plots the distribution of reads around the motif in + strand (black) - strand(green) and background non-motif matched site (green).
	page 4 : plots maximum purity achieved versus PWM to DNase-score weight. The overall PIQ score is the weighted sum of PWM and DNase-based scores. This plot shows the tradeoff in purity as a function of PWM dependence. 
	page 5 : scatterplot showing the distribution of DNase-score (y axis), PWM score (x axis) for motif match points (black, small dots) background points (red, small dots) and those called as bound by PIQ (back, large dots). The black large dots should show a clear enrichment over the red small dots.

##########
# How to run

0). Make sure you can execute common.r without errors (this make sure your R is set up correctly).

1). Generate the PWM hits across genome (does NOT depend on choice of BAM)

example - 
Rscript pwmmatch.r /cluster/thashim/basepiq/common.r /cluster/thashim/basepiq/pwms/jaspar.txt 139 /cluster/thashim/tmppiq/
--> this uses the genome and PWM cutoffs in common.r with the 139th motif in jaspar.txt (CTCF) and writes the matches as a binary R file called 139.RData in tmppiq.

2). Convert BAM to internal binary format (does NOT depend on choice of motif).

example - 
Rscript bam2rdata.r /cluster/thashim/basepiq/common.r /cluster/thashim/tmppiq/d0.RData /cluster/cwo/dnase_seq/bams/D0_50-100_130801.bwa.mapq20.mm10.bam
--> this takes the D0_50-100_130801.bwa.mapq20.mm10.bam file and retains only the read end locations, storing it into d0.RData.

3). Combine BAM + PWM to make calls, depends on choice of BAM and PWM. If you have multiple simultaneous runs, make sure each run gets a unique tmp folder.

Rscript pertf.r /cluster/thashim/basepiq/common.r /cluster/thashim/tmppiq/ /scratch/tmp/ /cluster/thashim/130130.mm10.d0/ /cluster/thashim/tmppiq/d0.RData 139
--> this takes settings in common.r to call the motif match 139.RData (CTCF, from above) using data d0.RData (from bam2rdata) and writing the output into 130130.mm10.d0. The tmp folder stores some large temporary matrices and can be wiped after the run.

###########
# Parallelization

option 1). use SGE to parallelize the runs.

option 2). if using R, there are example scripts in the utils/ directory for using snow to parallelize both PWM matching utils/pwmsge.R as well as calling TF binding utils/alltf.r 
